/* file: predict_types.cpp */
/*******************************************************************************
* Copyright 2014-2018 Intel Corporation
* All Rights Reserved.
*
* If this  software was obtained  under the  Intel Simplified  Software License,
* the following terms apply:
*
* The source code,  information  and material  ("Material") contained  herein is
* owned by Intel Corporation or its  suppliers or licensors,  and  title to such
* Material remains with Intel  Corporation or its  suppliers or  licensors.  The
* Material  contains  proprietary  information  of  Intel or  its suppliers  and
* licensors.  The Material is protected by  worldwide copyright  laws and treaty
* provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
* modified, published,  uploaded, posted, transmitted,  distributed or disclosed
* in any way without Intel's prior express written permission.  No license under
* any patent,  copyright or other  intellectual property rights  in the Material
* is granted to  or  conferred  upon  you,  either   expressly,  by implication,
* inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
* property rights must be express and approved by Intel in writing.
*
* Unless otherwise agreed by Intel in writing,  you may not remove or alter this
* notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
* suppliers or licensors in any way.
*
*
* If this  software  was obtained  under the  Apache License,  Version  2.0 (the
* "License"), the following terms apply:
*
* You may  not use this  file except  in compliance  with  the License.  You may
* obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*
* Unless  required  by   applicable  law  or  agreed  to  in  writing,  software
* distributed under the License  is distributed  on an  "AS IS"  BASIS,  WITHOUT
* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
* See the   License  for the   specific  language   governing   permissions  and
* limitations under the License.
*******************************************************************************/

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "daal.h"
#include "decision_forest/regression/prediction/JPredictionInput.h"
#include "decision_forest/regression/prediction/JPredictionResult.h"

#include "common_helpers.h"

USING_COMMON_NAMESPACES()
namespace dfrp = daal::algorithms::decision_forest::regression::prediction;

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionInput
* Method:    cSetInputTable
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionInput_cSetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    jniInput<dfrp::Input>::set<dfrp::NumericTableInputId, NumericTable>(inputAddr, id, ntAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionInput
* Method:    cGetInputTable
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionInput_cGetInputTable
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id)
{
    if(id != dfrp::data) return (jlong)-1;

    return jniInput<dfrp::Input>::get<dfrp::NumericTableInputId, NumericTable>(inputAddr, id);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionInput
* Method:    cSetInputModel
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionInput_cSetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id, jlong ntAddr)
{
    if(id != dfrp::model) return;

    jniInput<dfrp::Input>::set<dfrp::ModelInputId, decision_forest::regression::Model>(inputAddr, id, ntAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionInput
* Method:    cGetInputModel
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionInput_cGetInputModel
(JNIEnv *env, jobject thisObj, jlong inputAddr, jint id)
{
    if(id != dfrp::model) return (jlong)-1;

    return jniInput<dfrp::Input>::get<dfrp::ModelInputId, decision_forest::regression::Model>(inputAddr, id);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionInput
* Method:    cInit
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionInput_cInit
(JNIEnv *env, jobject thisObj, jlong algAddr, jint prec, jint method)
{
    return jniBatch<dfrp::Method, dfrp::Batch, dfrp::defaultDense>::getInput(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionResult
* Method:    cNewResult
* Signature: ()J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionResult_cNewResult
(JNIEnv *, jobject)
{
    return jniArgument<dfrp::Result>::newObj();
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionResult
* Method:    cGetResult
* Signature: (JII)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionResult_cGetResult
(JNIEnv *env, jobject thisObj, jlong algAddr, jint prec, jint method)
{
    return jniBatch<dfrp::Method, dfrp::Batch, dfrp::defaultDense>::getResult(prec, method, algAddr);
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionResult
* Method:    cGetResultTable
* Signature: (JI)J
*/
JNIEXPORT jlong JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionResult_cGetResultTable
(JNIEnv *env, jobject thisObj, jlong resAddr, jint id)
{
    return jniArgument<dfrp::Result>::get<dfrp::ResultId, NumericTable>(resAddr, dfrp::ResultId(id));
}

/*
* Class:     com_intel_daal_algorithms_decision_forest_regression_prediction_PredictionResult
* Method:    cSetResultTable
* Signature: (JIJ)V
*/
JNIEXPORT void JNICALL Java_com_intel_daal_algorithms_decision_1forest_regression_prediction_PredictionResult_cSetResultTable
(JNIEnv *, jobject, jlong resAddr, jint id, jlong numTableAddr)
{
    jniArgument<dfrp::Result>::set<dfrp::ResultId, NumericTable>(resAddr, dfrp::ResultId(id), numTableAddr);
}
